<?php

namespace TvShowManagerBundle\Repository;

/**
 * TvShowRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TvShowRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get all TvShow with his episodes
     * @return array
     */
    public function myFindAll(){
        // Ici l'alias 't' représente l'entité 'TvShow'
        $qb = $this->createQueryBuilder('t');
        // On select toute l'entité, du coup, on récupérera tous les champs de l'entité TvShow
        $qb->select('t')
            // On join l'entité episode, ce qui nous permet de récupérer tous les épisodes lié à nos TvShow
            ->join('t.episodes', 'e')
            // On select également tous les épisodes de chaque TvShow
            ->addSelect('e');

        // On consctruit la requête par rapport aux éléments défini en amont
        $query = $qb->getQuery();

        // Execution de la requête et récupuration des résultats
        $result = $query->getResult();

        // Renvoie des résultats
        return $result;
    }

    /**
     * @param $idTvShow int of TvShow
     * @return array
     * Get all episodes for one TvShow
     */
    public function getAllEpisodesForOneTvShow($idTvShow){
        // Initialisation d'une requete qui n'est pas lié directement à l'entitée TvShow
        $qb = $this->_em->createQueryBuilder();
        $qb->select('e')
            ->from('TvShowManagerBundle:Episode', 'e')
            ->join('e.tvShow', 'tv')
            ->where('tv.id = :idTvShow')
            ->setParameter('idTvShow', $idTvShow);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $idTvShow
     * @return mixed
     * Get nb episode from one TvShow
     * Cette fonction est utilisé dans la méthode myFindOneById ci dessous, et nous permet de vérifier qu'il y a
     * au moin un épisode lié à l'objet TvShow ciblé
     */
    private function countEpisodeFromOneTvShow($idTvShow){
        $qb = $this->createQueryBuilder('t');
        $qb->where('t.id = :idTvShow')
            ->join('t.episodes', 'e')
            ->select('count(e.id) as nb')
            ->setParameter('idTvShow', $idTvShow);
        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Get one TvShow by id and his episodes
     * @return mixed
     */
    public function myFindOneById($id){
        $qb = $this->createQueryBuilder('t');
        $qb->select('t')
            ->where('t.id = :id');

        if ($this->countEpisodeFromOneTvShow($id) != 0){
            $qb->join('t.episodes', 'e')
                ->addSelect('e');
        }

        $qb->setParameter('id', $id);

        return $qb->getQuery()->getSingleResult();
    }


}
